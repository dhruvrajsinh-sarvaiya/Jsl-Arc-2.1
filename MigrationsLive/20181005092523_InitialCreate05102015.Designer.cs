// <auto-generated />
using System;
using CleanArchitecture.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CleanArchitecture.Web.Migrations
{
    [DbContext(typeof(CleanArchitectureContext))]
    [Migration("20181005092523_InitialCreate05102015")]
    partial class InitialCreate05102015
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CleanArchitecture.Core.Entities.AddressMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("CoinName")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<byte>("IsDefaultAddress");

                    b.Property<long>("SerProID");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<long>("WalletId");

                    b.HasKey("Id");

                    b.ToTable("AddressMasters");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.CommAPIServiceMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("APID");

                    b.Property<long>("CommServiceID");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("Priority");

                    b.Property<string>("SMSBalURL")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("SMSSendURL")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("SenderID")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("CommAPIServiceMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.CommServiceMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CommSerproID");

                    b.Property<long>("CommServiceID");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("ParsingDataID");

                    b.Property<long>("RequestID");

                    b.Property<string>("ResponseFailure");

                    b.Property<string>("ResponseSuccess");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("CommServiceMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.CommServiceproviderMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<long>("CommSerproID");

                    b.Property<long>("CommServiceTypeID");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("SerproName")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("CommServiceproviderMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.CommServiceTypeMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CommServiceTypeID");

                    b.Property<string>("CommServiceTypeName")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("ServiceTypeID");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("CommServiceTypeMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Culture.Cultures", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Cultures");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.DepositHistory", b =>
                {
                    b.Property<string>("TrnID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100);

                    b.Property<string>("APITopUpRefNo");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("Confirmations");

                    b.Property<string>("ConfirmedTime")
                        .IsRequired();

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("EpochTimePure")
                        .IsRequired();

                    b.Property<string>("FromAddress")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("IsProcessing");

                    b.Property<long>("OrderID");

                    b.Property<string>("RouteTag");

                    b.Property<string>("SMSCode")
                        .IsRequired();

                    b.Property<long>("SerProID");

                    b.Property<short>("Status");

                    b.Property<string>("StatusMsg")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("SystemRemarks");

                    b.Property<string>("TimeEpoch")
                        .IsRequired();

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("TrnID");

                    b.ToTable("DepositHistorys");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.EmailQueue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Attachment")
                        .HasMaxLength(500);

                    b.Property<string>("BCC")
                        .HasMaxLength(500);

                    b.Property<string>("Body")
                        .IsRequired();

                    b.Property<string>("CC")
                        .HasMaxLength(500);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<short>("EmailType");

                    b.Property<string>("Recepient")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<short>("SendBy");

                    b.Property<short>("Status");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("EmailQueue");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Log.LoginLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DeviceID")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTime>("EndTime");

                    b.Property<int>("HostId");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<int?>("ModeId");

                    b.Property<DateTime>("StartTime");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ModeId");

                    b.ToTable("LoginLog");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.MessagingQueue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("MobileNo");

                    b.Property<string>("RespText")
                        .HasMaxLength(1000);

                    b.Property<short>("SMSSendBy");

                    b.Property<short>("SMSServiceID");

                    b.Property<string>("SMSText")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("MessagingQueue");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Modes.Mode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ModeType")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.ToTable("Mode");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.NotificationQueue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentTitle")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DeviceID")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<short>("Status");

                    b.Property<string>("Subject")
                        .HasMaxLength(50);

                    b.Property<string>("TickerText")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("NotificationQueue");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.ProductConfiguration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<long>("ServiceID");

                    b.Property<long>("StateID");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ProductConfiguration");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.ProviderConfiguration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("AppType");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("SerProName")
                        .HasMaxLength(30);

                    b.Property<short>("Status");

                    b.Property<long>("ThirPartyAPIID");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ProviderConfiguration");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.RequestFormatMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("MethodType")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("RequestFormat")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<long>("RequestID")
                        .HasMaxLength(60);

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("contentType")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.HasKey("Id");

                    b.ToTable("RequestFormatMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Resource.Resources", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CultureId");

                    b.Property<string>("Key");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("CultureId");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.RouteConfiguration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<byte>("IsDelayAddress");

                    b.Property<decimal>("MaximumAmount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("MinimumAmount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<string>("OpCode")
                        .HasMaxLength(50);

                    b.Property<short>("Priority");

                    b.Property<long>("ProductID");

                    b.Property<string>("ProviderWalletID")
                        .HasMaxLength(100);

                    b.Property<string>("RouteName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<long>("SerProID");

                    b.Property<long>("ServiceID");

                    b.Property<short>("Status");

                    b.Property<string>("StatusCheckUrl");

                    b.Property<string>("TransactionUrl");

                    b.Property<int>("TrnType");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("ValidationUrl");

                    b.HasKey("Id");

                    b.ToTable("RouteConfiguration");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.ServiceConfiguration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<decimal>("MaximumAmount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("MinimumAmount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<string>("SMSCode")
                        .HasMaxLength(10);

                    b.Property<string>("ServiceName")
                        .HasMaxLength(30);

                    b.Property<short>("ServiceType");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ServiceConfiguration");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.ServiceTypeMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("ServiceTypeID");

                    b.Property<string>("ServiceTypeName")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ServiceTypeMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.TemplateMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalInfo")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<long>("CommServiceTypeID");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1024);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<short>("Status");

                    b.Property<long>("TemplateID");

                    b.Property<string>("TemplateName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("TemplateMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.ThirdPartyAPIConfiguration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("APIBalURL");

                    b.Property<string>("APIName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("APIRequestBody");

                    b.Property<string>("APISendURL")
                        .IsRequired();

                    b.Property<string>("APIStatusCheckURL");

                    b.Property<string>("APIValidateURL");

                    b.Property<short>("AppType");

                    b.Property<string>("AuthHeader");

                    b.Property<string>("ContentType");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("HashCode");

                    b.Property<string>("HashCodeRecheck");

                    b.Property<short>("HashType");

                    b.Property<string>("MerchantCode");

                    b.Property<string>("MethodType");

                    b.Property<long>("ParsingDataID");

                    b.Property<string>("Password");

                    b.Property<string>("ResponseFailure");

                    b.Property<string>("ResponseHold");

                    b.Property<string>("ResponseSuccess");

                    b.Property<short>("Status");

                    b.Property<string>("TransactionIdPrefix");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("UserID");

                    b.HasKey("Id");

                    b.ToTable("ThirdPartyAPIConfiguration");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.ThirPartyAPIResponseConfiguration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BalanceRegex");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("ErrorCodeRegex");

                    b.Property<string>("OprTrnRefNoRegex");

                    b.Property<string>("Param1Regex");

                    b.Property<string>("Param2Regex");

                    b.Property<string>("Param3Regex");

                    b.Property<string>("ResponseCodeRegex");

                    b.Property<short>("Status");

                    b.Property<string>("StatusMsgRegex");

                    b.Property<string>("StatusRegex");

                    b.Property<string>("TrnRefNoRegex");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ThirPartyAPIResponseConfiguration");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.ToDoItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<bool>("IsDone");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("ToDoItems");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.TradeBitGoDelayAddresses", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("BitgoWalletId")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("CoinName")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<string>("CoinSpecific")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<byte>("GenerateBit");

                    b.Property<short>("Status");

                    b.Property<string>("TrnID")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<long>("WalletId");

                    b.Property<long>("WalletTypeId");

                    b.HasKey("Id");

                    b.ToTable("TradeBitGoDelayAddressess");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.TransactionAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("BatchNo");

                    b.Property<decimal>("CrAmt")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<decimal>("DrAmt")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<short>("IsSettled");

                    b.Property<long>("RefNo");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<short>("Status");

                    b.Property<DateTime>("TrnDate");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<long>("WalletID");

                    b.HasKey("Id");

                    b.ToTable("TransactionAccounts");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.TransactionQueue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalInfo");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal?>("ChargePer")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal?>("ChargeRs")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<short?>("ChargeType");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("MemberID");

                    b.Property<string>("MemberMobile")
                        .IsRequired();

                    b.Property<int>("ProductID");

                    b.Property<int>("RoutID");

                    b.Property<string>("SMSCode")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<long>("SerProID");

                    b.Property<long>("ServiceID");

                    b.Property<short>("Status");

                    b.Property<short>("StatusCode");

                    b.Property<string>("StatusMsg");

                    b.Property<string>("TransactionAccount")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("TrnDate");

                    b.Property<short>("TrnMode");

                    b.Property<string>("TrnRefNo");

                    b.Property<short>("TrnType");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<short>("VerifyDone");

                    b.HasKey("Id");

                    b.ToTable("TransactionQueue");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.User.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("BizRoles");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.User.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .HasMaxLength(250);

                    b.Property<bool>("IsEnabled");

                    b.Property<string>("LastName")
                        .HasMaxLength(250);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Mobile");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("BizUser");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.User.ApplicationUserPhotos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicationUserId");

                    b.Property<byte[]>("Content");

                    b.Property<string>("ContentType");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("BizUserPhotos");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.User.OtpMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<bool>("EnableStatus");

                    b.Property<DateTime>("ExpirTime");

                    b.Property<string>("OTP")
                        .IsRequired()
                        .HasMaxLength(6);

                    b.Property<int>("RegTypeId");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("OtpMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.User.RegisterType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("ActiveStatus");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<short>("Status");

                    b.Property<string>("Type");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("RegisterType");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.User.TempOtpMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<bool>("EnableStatus");

                    b.Property<DateTime>("ExpirTime");

                    b.Property<string>("OTP")
                        .IsRequired()
                        .HasMaxLength(6);

                    b.Property<int>("RegTypeId");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("TempOtpMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.User.TempUserRegister", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName")
                        .HasMaxLength(250);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName")
                        .HasMaxLength(250);

                    b.Property<string>("Mobile");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<int>("RegTypeId");

                    b.Property<bool>("RegisterStatus");

                    b.Property<string>("SecurityStemp");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("UserName")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("TempUserRegister");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.WalletLedger", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("CrAmt")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<decimal>("DrAmt")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("PostBal")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("PreBal")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("ServiceTypeID");

                    b.Property<short>("Status");

                    b.Property<long>("ToWalletMasterId");

                    b.Property<DateTime>("TrnDate");

                    b.Property<long>("TrnNo");

                    b.Property<int>("TrnType");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<long>("WalletMasterId");

                    b.HasKey("Id");

                    b.ToTable("WalletLedgers");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.WalletMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<string>("CoinName")
                        .IsRequired();

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsValid");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<long>("UserID");

                    b.Property<long>("WalletTypeID");

                    b.Property<string>("Walletname")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("WalletMasters");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.WalletOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DRemarks");

                    b.Property<long>("DWalletMasterID");

                    b.Property<decimal>("DeliveryAmt")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long?>("DeliveryGivenBy");

                    b.Property<DateTime?>("DeliveryGivenDate");

                    b.Property<string>("ORemarks")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long>("OWalletMasterID");

                    b.Property<decimal>("OrderAmt")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<DateTime>("OrderDate");

                    b.Property<int>("OrderType");

                    b.Property<int>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("WalletOrders");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.WalletTypeMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Discription")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("WalletTypeName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("WalletTypeMasters");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("BizRolesClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BizUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("BizUserLogin");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("BizUserRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("BizUserToken");
                });

            modelBuilder.Entity("OpenIddict.Models.OpenIddictApplication", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClientId")
                        .IsRequired();

                    b.Property<string>("ClientSecret");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken();

                    b.Property<string>("ConsentType");

                    b.Property<string>("DisplayName");

                    b.Property<string>("Permissions");

                    b.Property<string>("PostLogoutRedirectUris");

                    b.Property<string>("Properties");

                    b.Property<string>("RedirectUris");

                    b.Property<string>("Type")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("OpenIddictApplications");
                });

            modelBuilder.Entity("OpenIddict.Models.OpenIddictAuthorization", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationId");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken();

                    b.Property<string>("Properties");

                    b.Property<string>("Scopes");

                    b.Property<string>("Status")
                        .IsRequired();

                    b.Property<string>("Subject")
                        .IsRequired();

                    b.Property<string>("Type")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("OpenIddictAuthorizations");
                });

            modelBuilder.Entity("OpenIddict.Models.OpenIddictScope", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken();

                    b.Property<string>("Description");

                    b.Property<string>("DisplayName");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Properties");

                    b.Property<string>("Resources");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("OpenIddictScopes");
                });

            modelBuilder.Entity("OpenIddict.Models.OpenIddictToken", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationId");

                    b.Property<string>("AuthorizationId");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken();

                    b.Property<DateTimeOffset?>("CreationDate");

                    b.Property<DateTimeOffset?>("ExpirationDate");

                    b.Property<string>("Payload");

                    b.Property<string>("Properties");

                    b.Property<string>("ReferenceId");

                    b.Property<string>("Status");

                    b.Property<string>("Subject")
                        .IsRequired();

                    b.Property<string>("Type")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("AuthorizationId");

                    b.HasIndex("ReferenceId")
                        .IsUnique()
                        .HasFilter("[ReferenceId] IS NOT NULL");

                    b.ToTable("OpenIddictTokens");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Log.LoginLog", b =>
                {
                    b.HasOne("CleanArchitecture.Core.Entities.Modes.Mode", "Mode")
                        .WithMany()
                        .HasForeignKey("ModeId");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Resource.Resources", b =>
                {
                    b.HasOne("CleanArchitecture.Core.Entities.Culture.Cultures", "Culture")
                        .WithMany("Resources")
                        .HasForeignKey("CultureId");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.User.ApplicationUserPhotos", b =>
                {
                    b.HasOne("CleanArchitecture.Core.Entities.User.ApplicationUser", "ApplicationUser")
                        .WithOne("ProfilePhoto")
                        .HasForeignKey("CleanArchitecture.Core.Entities.User.ApplicationUserPhotos", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("CleanArchitecture.Core.Entities.User.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("CleanArchitecture.Core.Entities.User.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("CleanArchitecture.Core.Entities.User.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("CleanArchitecture.Core.Entities.User.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CleanArchitecture.Core.Entities.User.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("CleanArchitecture.Core.Entities.User.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OpenIddict.Models.OpenIddictAuthorization", b =>
                {
                    b.HasOne("OpenIddict.Models.OpenIddictApplication", "Application")
                        .WithMany("Authorizations")
                        .HasForeignKey("ApplicationId");
                });

            modelBuilder.Entity("OpenIddict.Models.OpenIddictToken", b =>
                {
                    b.HasOne("OpenIddict.Models.OpenIddictApplication", "Application")
                        .WithMany("Tokens")
                        .HasForeignKey("ApplicationId");

                    b.HasOne("OpenIddict.Models.OpenIddictAuthorization", "Authorization")
                        .WithMany("Tokens")
                        .HasForeignKey("AuthorizationId");
                });
#pragma warning restore 612, 618
        }
    }
}
